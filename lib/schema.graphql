enum Level {
  rookie
  middle
  senior
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type DeletionID {
  _id: ID
  ok: Boolean
}

type Query {
  "Return an array of courses"
  courses: [Course]
  "Return one course"
  course(id: ID!): Course
  "Return an array of students"
  people: [Person]
  "Return one student"
  person(id: ID!): Person
  "search global"
  searchItems(keyword: String!): [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input EditPersonInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Create course"
  createCourse(input: CourseInput!): Course
  "Edit course"
  editCourse(_id: ID!, input: CourseEditInput!): Course
  "Edit person"
  editPerson(_id: ID!, input: EditPersonInput!): Person
  "Create person"
  createPerson(input: PersonInput!): Person
  "Delete course"
  deleteCourse(_id: ID!): DeletionID
  "Delete person"
  deletePerson(_id: ID!): DeletionID
  "Add person to a course"
  addPeople(courseID: ID!, personID: ID!): Course
}
